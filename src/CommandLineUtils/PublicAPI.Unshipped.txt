McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.ParseResult(McMaster.Extensions.CommandLineUtils.CommandLineApplication selectedCommand) -> void
McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(string[] args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>
McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecuteAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<int>> invoke) -> void
McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute
McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute.DirectoryNotExistsAttribute() -> void
McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException
McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException.ModelType.get -> System.Type
McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException.SubcommandCycleException(System.Type modelType) -> void
McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute
McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute.FileNotExistsAttribute() -> void
McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute
McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute.FileOrDirectoryNotExistsAttribute() -> void
McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.Template.get -> string
McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.Template.set -> void
McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.IndentWriter.get -> McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter
McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.IndentWriter.set -> void
McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter
McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.HangingIndentWriter(int indentSize, int? maxLineLength = null, bool indentFirstLine = false) -> void
McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.Write(string input) -> string
McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase
McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.Template.get -> string
McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.Template.set -> void
McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.Template.get -> string
McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.Template.set -> void
const McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.ColumnSeparatorLength = 2 -> int
const McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.DefaultConsoleWidth = 80 -> int
static McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingFile(this McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder builder, string errorMessage = null) -> McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder
static McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingDirectory(this McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder builder, string errorMessage = null) -> McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder
static McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingFileOrDirectory(this McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder builder, string errorMessage = null) -> McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder
static McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync<TApp>(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>
static McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync<TApp>(string[] args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>
static McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecuteAsync(this McMaster.Extensions.CommandLineUtils.CommandLineApplication app, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> action) -> void
