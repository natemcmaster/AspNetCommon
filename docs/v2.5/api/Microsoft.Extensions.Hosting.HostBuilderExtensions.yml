### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions
  commentId: T:Microsoft.Extensions.Hosting.HostBuilderExtensions
  id: HostBuilderExtensions
  parent: Microsoft.Extensions.Hosting
  children:
  - Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync``1(Microsoft.Extensions.Hosting.IHostBuilder,System.String[],System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: HostBuilderExtensions
  nameWithType: HostBuilderExtensions
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Hosting.CommandLine/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineUtils.git
    id: HostBuilderExtensions
    path: ../src/Hosting.CommandLine/HostBuilderExtensions.cs
    startLine: 19
  assemblies:
  - McMaster.Extensions.Hosting.CommandLine
  namespace: Microsoft.Extensions.Hosting
  summary: "\nExtension methods for <xref href=\"Microsoft.Extensions.Hosting.IHostBuilder\" data-throw-if-not-resolved=\"false\"></xref> support.\n"
  example: []
  syntax:
    content: public static class HostBuilderExtensions
    content.vb: Public Module HostBuilderExtensions
  seealso:
  - linkType: HRef
    linkId: https://github.com/natemcmaster/CommandLineUtils/issues/134
    altText: host support
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync``1(Microsoft.Extensions.Hosting.IHostBuilder,System.String[],System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync``1(Microsoft.Extensions.Hosting.IHostBuilder,System.String[],System.Threading.CancellationToken)
  id: RunCommandLineApplicationAsync``1(Microsoft.Extensions.Hosting.IHostBuilder,System.String[],System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Hosting.HostBuilderExtensions
  langs:
  - csharp
  - vb
  name: RunCommandLineApplicationAsync<TApp>(IHostBuilder, String[], CancellationToken)
  nameWithType: HostBuilderExtensions.RunCommandLineApplicationAsync<TApp>(IHostBuilder, String[], CancellationToken)
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync<TApp>(Microsoft.Extensions.Hosting.IHostBuilder, System.String[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hosting.CommandLine/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineUtils.git
    id: RunCommandLineApplicationAsync
    path: ../src/Hosting.CommandLine/HostBuilderExtensions.cs
    startLine: 31
  assemblies:
  - McMaster.Extensions.Hosting.CommandLine
  namespace: Microsoft.Extensions.Hosting
  summary: "\nRuns an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code> using <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref> to provide\ncommand line parsing on the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">args</code>.  This method should be the primary approach\ntaken for command line applications.\n"
  example: []
  syntax:
    content: >-
      public static Task<int> RunCommandLineApplicationAsync<TApp>(this IHostBuilder hostBuilder, string[] args, CancellationToken cancellationToken = default(CancellationToken))
          where TApp : class
    parameters:
    - id: hostBuilder
      type: Microsoft.Extensions.Hosting.IHostBuilder
      description: This instance
    - id: args
      type: System.String[]
      description: The command line arguments
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    typeParameters:
    - id: TApp
      description: The type of the command line application implementation
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task whose result is the exit code of the application
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RunCommandLineApplicationAsync(Of TApp As Class)(hostBuilder As IHostBuilder, args As String(), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync*
  nameWithType.vb: HostBuilderExtensions.RunCommandLineApplicationAsync(Of TApp)(IHostBuilder, String(), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync(Of TApp)(Microsoft.Extensions.Hosting.IHostBuilder, System.String(), System.Threading.CancellationToken)
  name.vb: RunCommandLineApplicationAsync(Of TApp)(IHostBuilder, String(), CancellationToken)
references:
- uid: Microsoft.Extensions.Hosting.IHostBuilder
  commentId: T:Microsoft.Extensions.Hosting.IHostBuilder
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostBuilder
  nameWithType: IHostBuilder
  fullName: Microsoft.Extensions.Hosting.IHostBuilder
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandLineApplication
  nameWithType: CommandLineApplication
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync
  name: RunCommandLineApplicationAsync
  nameWithType: HostBuilderExtensions.RunCommandLineApplicationAsync
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.RunCommandLineApplicationAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils
  commentId: N:McMaster.Extensions.CommandLineUtils
  name: McMaster.Extensions.CommandLineUtils
  nameWithType: McMaster.Extensions.CommandLineUtils
  fullName: McMaster.Extensions.CommandLineUtils
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
